**策略模式（Strategy Pattern）是一种行为型设计模式，它允许在运行时选择算法的行为。在策略模式中，我们定义了一组算法，将每个算法封装在一个类中，并使它们可互换。策略模式使算法可独立于使用它们的客户端而变化**



**策略模式中的例子包含以下原则：**

1. **开闭原则**：策略模式实现了对修改关闭，对扩展开放的原则，通过定义抽象策略接口和具体策略类，可以在不修改原有代码的情况下新增、替换策略类。**例如新增一个计算金额方式的时候只需要新建一个计算金额策略的实现类即可**
2. **依赖倒置原则**：策略模式通过依赖抽象策略接口，而不是具体策略类，实现了依赖倒置原则，高层模块不依赖于低层模块，二者都依赖于抽象，具体类依赖于抽象类。**例如order类中的计算金额策略属性**
3. **单一职责原则**：策略模式通过将不同的算法封装在不同的策略类中，实现了单一职责原则，每个策略类只负责一个具体的算法实现。l**例如默认策略和打折策略只负责自己的金额计算方式**
4. **接口隔离原则**：策略模式中的抽象策略接口只包含一个执行算法的方法，避免了不必要的方法定义，实现了接口隔离原则。**例如TotalAmountCalculatorService策略接口只有一个calculate计算金额方法**
5. **里氏替换原则**：策略模式中具体策略类必须能够替换其所实现的抽象策略接口，即具体策略类必须满足抽象策略接口定义的方法和规范，实现了里氏替换原则。**例如默认策略和打折策略都实现了策略接口的计算方法**
6. **迪米特法则**：也称为最少知识原则，是指一个对象应该对其他对象有最少的了解，即一个类应该对自己需要耦合或调用的类知道得最少，这样可以降低类之间的耦合性，提高系统的可维护性和可扩展性。**例如Order类中的userInfo字段 只取了需要的用户信息字段作为一个对象，而不是直接使用User对象**
7. **合成复用原则**：合成复用原则的核心思想是尽量使用组合关系来替代继承关系，因为继承关系会破坏类的封装性，导致代码的可复用     性降低，同时也会增加系统的耦合度，使得系统变得脆弱和难以维护。**例如，我们需要实现一个汽车类，其中包含了发动机、轮胎、刹车等多个部件。我们可以使用继承来实现，将汽车类作为父类，然后派生出轿车、卡车、客车等子类。但是这种实现方式会导致类的继承关系变得复杂，而且每个子类都需要重新实现一遍父类的方法，代码的可复用性和可维护性都会降低。因此，我们可以采用合成复用原则来实现，将汽车类作为一个容器类，然后将发动机、轮胎、刹车等部件作为成员对象纳入汽车类中，从而实现汽车类的功能。这种实现方式不仅代码简单，而且可以提高代码的可复用性和可维护性。（该案例没有实现此原则）**。

​    

**下面是一个简单的案例，使用策略模式实现计算订单金额，同时遵循以上原则：**

`entity`

```java
package cn.zjy.OpenClosePrinciple.entity;

import cn.zjy.OpenClosePrinciple.service.TotalAmountCalculatorService;
import cn.zjy.OpenClosePrinciple.service.impl.DefaultTotalMountCalculatorImpl;

/**
 * @author ZhangJiaYi
 * @time 2023/04/19 14:39:59
 * @description 订单类
 */
public class Order {
    /**
     * 订单id
     */
    private long id;
    /**
     * 用户信息
     */
    private OrderUserInfo userInfo;
    /**
     * 总金额
     */
    private double totalAmount;
    /**
     * 折扣
     */
    private double discount;

    /**
     * 订单总金额计算策略
     */
    private TotalAmountCalculatorService calculator;

    /**
     * 订单构造函数  使用默认策略计算订单总金额
     */
    public Order(long id, OrderUserInfo userInfo, double totalAmount, double discount) {
        this.id = id;
        this.userInfo = userInfo;
        this.totalAmount = totalAmount;
        this.discount = discount;
        this.calculator = new DefaultTotalMountCalculatorImpl();
    }

    /**
     * 设置订单总金额计算策略
     */
    public void setCalculator(TotalAmountCalculatorService calculator) {
        this.calculator = calculator;
    }

    /**
     * 计算总金额
     *
     * @return 订单总金额
     */
    public double calculateTotalAmount() {
        return this.calculator.calculate(this.totalAmount, this.discount);
    }


}
```

```java
package cn.zjy.OpenClosePrinciple.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * @author ZhangJiaYi
 * @time 2023/04/19 16:56:42
 * @description 订单用户信息类
 */
@Getter
@AllArgsConstructor
public class OrderUserInfo {
    /**
     * 名字
     */
    private String name;
    /**
     * 地址
     */
    private String address;
    /**
     * 电话
     */
    private String phone;


}
```

```java
package cn.zjy.OpenClosePrinciple.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * @author ZhangJiaYi
 * @time 2023/04/19 16:57:48
 * @description 用户类
 */
@Getter
@AllArgsConstructor
public class User {
    /**
     * 名字
     */
    private String name;
    /**
     * 性别
     */
    private int sex;
    /**
     * 地址
     */
    private String address;
    /**
     * 电话
     */
    private String phone;
    /**
     * 电子邮件
     */
    private String email;
    /**
     * 爱好
     */
    private String hobby;
}
```

`service`

```java
package cn.zjy.OpenClosePrinciple.service;

/**
 * @author ZhangJiaYi
 * @time 2023/04/19 14:45:39
 * @description 计算订单总金额的策略接口
 */
public interface TotalAmountCalculatorService {

    /**
     * 计算
     *
     * @param totalAmount 总金额
     * @param discount    折扣
     * @return 总金额
     */
    double calculate(double totalAmount, double discount);

}
```

`impl`

```java
package cn.zjy.OpenClosePrinciple.service.impl;

import cn.zjy.OpenClosePrinciple.service.TotalAmountCalculatorService;

/**
 * @author ZhangJiaYi
 * @time 2023/04/19 14:48:52
 * @description 默认订单总金额计算策略
 */
public class DefaultTotalMountCalculatorImpl implements TotalAmountCalculatorService {
    @Override
    public double calculate(double totalAmount, double discount) {
        return totalAmount - discount;
    }

}
```

```java
package cn.zjy.OpenClosePrinciple.service.impl;

import cn.zjy.OpenClosePrinciple.service.TotalAmountCalculatorService;

/**
 * @author ZhangJiaYi
 * @time 2023/04/19 14:51:27
 * @description 打折订单总金额计算策略
 */
public class DiscountTotalAmountCalculatorImpl implements TotalAmountCalculatorService {
    @Override
    public double calculate(double totalAmount, double discount) {
        return totalAmount * 0.5 - discount;
    }
}
```

`controller`

```java
package cn.zjy.OpenClosePrinciple.controller;

import cn.zjy.OpenClosePrinciple.entity.Order;
import cn.zjy.OpenClosePrinciple.service.impl.DiscountTotalAmountCalculatorImpl;

/**
 * @author ZhangJiaYi
 * @time 2023/04/19 15:01:20
 * @description 订单控制层
 */
public class OrderController {
    public static void main(String[] args) {
        System.out.println("订单总金额为: " + calculateTotalAmount());
    }

    /**
     * 计算订单总金额
     *
     * @return 订单总金额
     */
    public static double calculateTotalAmount() {
        //创建订单
        Order order = new Order(1, "ikun", 1000, 100);
        //设置打折计算策略
        order.setCalculator(new DiscountTotalAmountCalculatorImpl());
        return order.calculateTotalAmount();
    }
}
```
